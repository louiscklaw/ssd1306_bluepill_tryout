ARM GAS  /tmp/ccTdk9tj.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"ssd1306.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ssd1306_Reset,"ax",%progbits
  16              		.align	1
  17              		.global	ssd1306_Reset
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	ssd1306_Reset:
  24              	.LFB66:
  25              		.file 1 "Src/ssd1306.c"
   1:Src/ssd1306.c **** #include "ssd1306.h"
   2:Src/ssd1306.c **** 
   3:Src/ssd1306.c **** #if defined(SSD1306_USE_I2C)
   4:Src/ssd1306.c **** 
   5:Src/ssd1306.c **** void ssd1306_Reset(void) {
  26              		.loc 1 5 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
   6:Src/ssd1306.c **** 	/* for I2C - do nothing */
   7:Src/ssd1306.c **** }
  31              		.loc 1 7 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE66:
  36              		.section	.text.ssd1306_WriteCommand,"ax",%progbits
  37              		.align	1
  38              		.global	ssd1306_WriteCommand
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	ssd1306_WriteCommand:
  45              	.LFB67:
   8:Src/ssd1306.c **** 
   9:Src/ssd1306.c **** // Send a byte to the command register
  10:Src/ssd1306.c **** void ssd1306_WriteCommand(uint8_t byte) {
  46              		.loc 1 10 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 8
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL0:
ARM GAS  /tmp/ccTdk9tj.s 			page 2


  51 0000 00B5     		push	{lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 4
  54              		.cfi_offset 14, -4
  55 0002 87B0     		sub	sp, sp, #28
  56              	.LCFI1:
  57              		.cfi_def_cfa_offset 32
  58 0004 06AA     		add	r2, sp, #24
  59 0006 02F8010D 		strb	r0, [r2, #-1]!
  11:Src/ssd1306.c **** 	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
  60              		.loc 1 11 0
  61 000a 4FF0FF33 		mov	r3, #-1
  62 000e 0293     		str	r3, [sp, #8]
  63 0010 0123     		movs	r3, #1
  64 0012 0193     		str	r3, [sp, #4]
  65 0014 0092     		str	r2, [sp]
  66 0016 0022     		movs	r2, #0
  67 0018 7821     		movs	r1, #120
  68 001a 0348     		ldr	r0, .L4
  69              	.LVL1:
  70 001c FFF7FEFF 		bl	HAL_I2C_Mem_Write
  71              	.LVL2:
  12:Src/ssd1306.c **** }
  72              		.loc 1 12 0
  73 0020 07B0     		add	sp, sp, #28
  74              	.LCFI2:
  75              		.cfi_def_cfa_offset 4
  76              		@ sp needed
  77 0022 5DF804FB 		ldr	pc, [sp], #4
  78              	.L5:
  79 0026 00BF     		.align	2
  80              	.L4:
  81 0028 00000000 		.word	hi2c1
  82              		.cfi_endproc
  83              	.LFE67:
  85              		.section	.text.ssd1306_WriteData,"ax",%progbits
  86              		.align	1
  87              		.global	ssd1306_WriteData
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu softvfp
  93              	ssd1306_WriteData:
  94              	.LFB68:
  13:Src/ssd1306.c **** 
  14:Src/ssd1306.c **** // Send data
  15:Src/ssd1306.c **** void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
  95              		.loc 1 15 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              	.LVL3:
 100 0000 00B5     		push	{lr}
 101              	.LCFI3:
 102              		.cfi_def_cfa_offset 4
 103              		.cfi_offset 14, -4
 104 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccTdk9tj.s 			page 3


 105              	.LCFI4:
 106              		.cfi_def_cfa_offset 24
  16:Src/ssd1306.c **** 	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 107              		.loc 1 16 0
 108 0004 4FF0FF33 		mov	r3, #-1
 109 0008 0293     		str	r3, [sp, #8]
 110 000a 89B2     		uxth	r1, r1
 111              	.LVL4:
 112 000c 0191     		str	r1, [sp, #4]
 113 000e 0090     		str	r0, [sp]
 114 0010 0123     		movs	r3, #1
 115 0012 4022     		movs	r2, #64
 116 0014 7821     		movs	r1, #120
 117 0016 0348     		ldr	r0, .L8
 118              	.LVL5:
 119 0018 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 120              	.LVL6:
  17:Src/ssd1306.c **** }
 121              		.loc 1 17 0
 122 001c 05B0     		add	sp, sp, #20
 123              	.LCFI5:
 124              		.cfi_def_cfa_offset 4
 125              		@ sp needed
 126 001e 5DF804FB 		ldr	pc, [sp], #4
 127              	.L9:
 128 0022 00BF     		.align	2
 129              	.L8:
 130 0024 00000000 		.word	hi2c1
 131              		.cfi_endproc
 132              	.LFE68:
 134              		.section	.text.ssd1306_Fill,"ax",%progbits
 135              		.align	1
 136              		.global	ssd1306_Fill
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu softvfp
 142              	ssd1306_Fill:
 143              	.LFB70:
  18:Src/ssd1306.c **** 
  19:Src/ssd1306.c **** #elif defined(SSD1306_USE_SPI)
  20:Src/ssd1306.c **** 
  21:Src/ssd1306.c **** void ssd1306_Reset(void) {
  22:Src/ssd1306.c **** 	// CS = High (not selected)
  23:Src/ssd1306.c **** 	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
  24:Src/ssd1306.c **** 
  25:Src/ssd1306.c **** 	// Reset the OLED
  26:Src/ssd1306.c **** 	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
  27:Src/ssd1306.c **** 	HAL_Delay(10);
  28:Src/ssd1306.c **** 	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
  29:Src/ssd1306.c **** 	HAL_Delay(10);
  30:Src/ssd1306.c **** }
  31:Src/ssd1306.c **** 
  32:Src/ssd1306.c **** // Send a byte to the command register
  33:Src/ssd1306.c **** void ssd1306_WriteCommand(uint8_t byte) {
  34:Src/ssd1306.c ****     HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
  35:Src/ssd1306.c ****     HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
ARM GAS  /tmp/ccTdk9tj.s 			page 4


  36:Src/ssd1306.c ****     HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
  37:Src/ssd1306.c ****     HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
  38:Src/ssd1306.c **** }
  39:Src/ssd1306.c **** 
  40:Src/ssd1306.c **** // Send data
  41:Src/ssd1306.c **** void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
  42:Src/ssd1306.c ****     HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
  43:Src/ssd1306.c ****     HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
  44:Src/ssd1306.c ****     HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
  45:Src/ssd1306.c ****     HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
  46:Src/ssd1306.c **** }
  47:Src/ssd1306.c **** 
  48:Src/ssd1306.c **** #else
  49:Src/ssd1306.c **** #error "You should define SSD1306_USE_SPI or SSD1306_USE_I2C macro"
  50:Src/ssd1306.c **** #endif
  51:Src/ssd1306.c **** 
  52:Src/ssd1306.c **** 
  53:Src/ssd1306.c **** // Screenbuffer
  54:Src/ssd1306.c **** static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];
  55:Src/ssd1306.c **** 
  56:Src/ssd1306.c **** // Screen object
  57:Src/ssd1306.c **** static SSD1306_t SSD1306;
  58:Src/ssd1306.c **** 
  59:Src/ssd1306.c **** // Initialize the oled screen
  60:Src/ssd1306.c **** void ssd1306_Init(void) {
  61:Src/ssd1306.c **** 	// Reset OLED
  62:Src/ssd1306.c **** 	ssd1306_Reset();
  63:Src/ssd1306.c **** 
  64:Src/ssd1306.c ****     // Wait for the screen to boot
  65:Src/ssd1306.c ****     HAL_Delay(100);
  66:Src/ssd1306.c ****     
  67:Src/ssd1306.c ****     // Init OLED
  68:Src/ssd1306.c ****     ssd1306_WriteCommand(0xAE); //display off
  69:Src/ssd1306.c **** 
  70:Src/ssd1306.c ****     ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
  71:Src/ssd1306.c ****     ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
  72:Src/ssd1306.c ****                                 // 10,Page Addressing Mode (RESET); 11,Invalid
  73:Src/ssd1306.c **** 
  74:Src/ssd1306.c ****     ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
  75:Src/ssd1306.c **** 
  76:Src/ssd1306.c **** #ifdef SSD1306_MIRROR_VERT
  77:Src/ssd1306.c ****     ssd1306_WriteCommand(0xC0); // Mirror vertically
  78:Src/ssd1306.c **** #else
  79:Src/ssd1306.c ****     ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
  80:Src/ssd1306.c **** #endif
  81:Src/ssd1306.c **** 
  82:Src/ssd1306.c ****     ssd1306_WriteCommand(0x00); //---set low column address
  83:Src/ssd1306.c ****     ssd1306_WriteCommand(0x10); //---set high column address
  84:Src/ssd1306.c **** 
  85:Src/ssd1306.c ****     ssd1306_WriteCommand(0x40); //--set start line address - CHECK
  86:Src/ssd1306.c **** 
  87:Src/ssd1306.c ****     ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
  88:Src/ssd1306.c ****     ssd1306_WriteCommand(0xFF);
  89:Src/ssd1306.c **** 
  90:Src/ssd1306.c **** #ifdef SSD1306_MIRROR_HORIZ
  91:Src/ssd1306.c ****     ssd1306_WriteCommand(0xA0); // Mirror horizontally
  92:Src/ssd1306.c **** #else
ARM GAS  /tmp/ccTdk9tj.s 			page 5


  93:Src/ssd1306.c ****     ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
  94:Src/ssd1306.c **** #endif
  95:Src/ssd1306.c **** 
  96:Src/ssd1306.c **** #ifdef SSD1306_INVERSE_COLOR
  97:Src/ssd1306.c ****     ssd1306_WriteCommand(0xA7); //--set inverse color
  98:Src/ssd1306.c **** #else
  99:Src/ssd1306.c ****     ssd1306_WriteCommand(0xA6); //--set normal color
 100:Src/ssd1306.c **** #endif
 101:Src/ssd1306.c **** 
 102:Src/ssd1306.c ****     ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 103:Src/ssd1306.c ****     ssd1306_WriteCommand(0x3F); //
 104:Src/ssd1306.c **** 
 105:Src/ssd1306.c ****     ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 106:Src/ssd1306.c **** 
 107:Src/ssd1306.c ****     ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 108:Src/ssd1306.c ****     ssd1306_WriteCommand(0x00); //-not offset
 109:Src/ssd1306.c **** 
 110:Src/ssd1306.c ****     ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 111:Src/ssd1306.c ****     ssd1306_WriteCommand(0xF0); //--set divide ratio
 112:Src/ssd1306.c **** 
 113:Src/ssd1306.c ****     ssd1306_WriteCommand(0xD9); //--set pre-charge period
 114:Src/ssd1306.c ****     ssd1306_WriteCommand(0x22); //
 115:Src/ssd1306.c **** 
 116:Src/ssd1306.c ****     ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 117:Src/ssd1306.c ****     ssd1306_WriteCommand(0x12);
 118:Src/ssd1306.c **** 
 119:Src/ssd1306.c ****     ssd1306_WriteCommand(0xDB); //--set vcomh
 120:Src/ssd1306.c ****     ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 121:Src/ssd1306.c **** 
 122:Src/ssd1306.c ****     ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 123:Src/ssd1306.c ****     ssd1306_WriteCommand(0x14); //
 124:Src/ssd1306.c ****     ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 125:Src/ssd1306.c **** 
 126:Src/ssd1306.c ****     // Clear screen
 127:Src/ssd1306.c ****     ssd1306_Fill(Black);
 128:Src/ssd1306.c ****     
 129:Src/ssd1306.c ****     // Flush buffer to screen
 130:Src/ssd1306.c ****     ssd1306_UpdateScreen();
 131:Src/ssd1306.c ****     
 132:Src/ssd1306.c ****     // Set default values for screen object
 133:Src/ssd1306.c ****     SSD1306.CurrentX = 0;
 134:Src/ssd1306.c ****     SSD1306.CurrentY = 0;
 135:Src/ssd1306.c ****     
 136:Src/ssd1306.c ****     SSD1306.Initialized = 1;
 137:Src/ssd1306.c **** }
 138:Src/ssd1306.c **** 
 139:Src/ssd1306.c **** // Fill the whole screen with the given color
 140:Src/ssd1306.c **** void ssd1306_Fill(SSD1306_COLOR color) {
 144              		.loc 1 140 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149              	.LVL7:
 141:Src/ssd1306.c ****     /* Set memory */
 142:Src/ssd1306.c ****     uint32_t i;
 143:Src/ssd1306.c **** 
ARM GAS  /tmp/ccTdk9tj.s 			page 6


 144:Src/ssd1306.c ****     for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 150              		.loc 1 144 0
 151 0000 0023     		movs	r3, #0
 152 0002 03E0     		b	.L11
 153              	.LVL8:
 154              	.L14:
 145:Src/ssd1306.c ****         SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 155              		.loc 1 145 0
 156 0004 FF21     		movs	r1, #255
 157              	.L12:
 158              		.loc 1 145 0 is_stmt 0 discriminator 4
 159 0006 054A     		ldr	r2, .L16
 160 0008 D154     		strb	r1, [r2, r3]
 144:Src/ssd1306.c ****         SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 161              		.loc 1 144 0 is_stmt 1 discriminator 4
 162 000a 0133     		adds	r3, r3, #1
 163              	.LVL9:
 164              	.L11:
 144:Src/ssd1306.c ****         SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 165              		.loc 1 144 0 is_stmt 0 discriminator 2
 166 000c B3F5806F 		cmp	r3, #1024
 167 0010 03D2     		bcs	.L15
 168              		.loc 1 145 0 is_stmt 1
 169 0012 0028     		cmp	r0, #0
 170 0014 F6D1     		bne	.L14
 171 0016 0021     		movs	r1, #0
 172 0018 F5E7     		b	.L12
 173              	.L15:
 146:Src/ssd1306.c ****     }
 147:Src/ssd1306.c **** }
 174              		.loc 1 147 0
 175 001a 7047     		bx	lr
 176              	.L17:
 177              		.align	2
 178              	.L16:
 179 001c 00000000 		.word	.LANCHOR0
 180              		.cfi_endproc
 181              	.LFE70:
 183              		.section	.text.ssd1306_UpdateScreen,"ax",%progbits
 184              		.align	1
 185              		.global	ssd1306_UpdateScreen
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu softvfp
 191              	ssd1306_UpdateScreen:
 192              	.LFB71:
 148:Src/ssd1306.c **** 
 149:Src/ssd1306.c **** // Write the screenbuffer with changed to the screen
 150:Src/ssd1306.c **** void ssd1306_UpdateScreen(void) {
 193              		.loc 1 150 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 10B5     		push	{r4, lr}
 198              	.LCFI6:
 199              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccTdk9tj.s 			page 7


 200              		.cfi_offset 4, -8
 201              		.cfi_offset 14, -4
 202              	.LVL10:
 151:Src/ssd1306.c ****     uint8_t i;
 152:Src/ssd1306.c ****     for(i = 0; i < 8; i++) {
 203              		.loc 1 152 0
 204 0002 0024     		movs	r4, #0
 205 0004 12E0     		b	.L19
 206              	.LVL11:
 207              	.L20:
 153:Src/ssd1306.c ****         ssd1306_WriteCommand(0xB0 + i);
 208              		.loc 1 153 0 discriminator 3
 209 0006 A4F15000 		sub	r0, r4, #80
 210 000a C0B2     		uxtb	r0, r0
 211 000c FFF7FEFF 		bl	ssd1306_WriteCommand
 212              	.LVL12:
 154:Src/ssd1306.c ****         ssd1306_WriteCommand(0x00);
 213              		.loc 1 154 0 discriminator 3
 214 0010 0020     		movs	r0, #0
 215 0012 FFF7FEFF 		bl	ssd1306_WriteCommand
 216              	.LVL13:
 155:Src/ssd1306.c ****         ssd1306_WriteCommand(0x10);
 217              		.loc 1 155 0 discriminator 3
 218 0016 1020     		movs	r0, #16
 219 0018 FFF7FEFF 		bl	ssd1306_WriteCommand
 220              	.LVL14:
 156:Src/ssd1306.c ****         ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 221              		.loc 1 156 0 discriminator 3
 222 001c 8021     		movs	r1, #128
 223 001e 0548     		ldr	r0, .L22
 224 0020 00EBC410 		add	r0, r0, r4, lsl #7
 225 0024 FFF7FEFF 		bl	ssd1306_WriteData
 226              	.LVL15:
 152:Src/ssd1306.c ****         ssd1306_WriteCommand(0xB0 + i);
 227              		.loc 1 152 0 discriminator 3
 228 0028 0134     		adds	r4, r4, #1
 229              	.LVL16:
 230 002a E4B2     		uxtb	r4, r4
 231              	.LVL17:
 232              	.L19:
 152:Src/ssd1306.c ****         ssd1306_WriteCommand(0xB0 + i);
 233              		.loc 1 152 0 is_stmt 0 discriminator 1
 234 002c 072C     		cmp	r4, #7
 235 002e EAD9     		bls	.L20
 157:Src/ssd1306.c ****     }
 158:Src/ssd1306.c **** }
 236              		.loc 1 158 0 is_stmt 1
 237 0030 10BD     		pop	{r4, pc}
 238              	.LVL18:
 239              	.L23:
 240 0032 00BF     		.align	2
 241              	.L22:
 242 0034 00000000 		.word	.LANCHOR0
 243              		.cfi_endproc
 244              	.LFE71:
 246              		.section	.text.ssd1306_Init,"ax",%progbits
 247              		.align	1
ARM GAS  /tmp/ccTdk9tj.s 			page 8


 248              		.global	ssd1306_Init
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu softvfp
 254              	ssd1306_Init:
 255              	.LFB69:
  60:Src/ssd1306.c **** 	// Reset OLED
 256              		.loc 1 60 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260 0000 08B5     		push	{r3, lr}
 261              	.LCFI7:
 262              		.cfi_def_cfa_offset 8
 263              		.cfi_offset 3, -8
 264              		.cfi_offset 14, -4
  65:Src/ssd1306.c ****     
 265              		.loc 1 65 0
 266 0002 6420     		movs	r0, #100
 267 0004 FFF7FEFF 		bl	HAL_Delay
 268              	.LVL19:
  68:Src/ssd1306.c **** 
 269              		.loc 1 68 0
 270 0008 AE20     		movs	r0, #174
 271 000a FFF7FEFF 		bl	ssd1306_WriteCommand
 272              	.LVL20:
  70:Src/ssd1306.c ****     ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 273              		.loc 1 70 0
 274 000e 2020     		movs	r0, #32
 275 0010 FFF7FEFF 		bl	ssd1306_WriteCommand
 276              	.LVL21:
  71:Src/ssd1306.c ****                                 // 10,Page Addressing Mode (RESET); 11,Invalid
 277              		.loc 1 71 0
 278 0014 1020     		movs	r0, #16
 279 0016 FFF7FEFF 		bl	ssd1306_WriteCommand
 280              	.LVL22:
  74:Src/ssd1306.c **** 
 281              		.loc 1 74 0
 282 001a B020     		movs	r0, #176
 283 001c FFF7FEFF 		bl	ssd1306_WriteCommand
 284              	.LVL23:
  79:Src/ssd1306.c **** #endif
 285              		.loc 1 79 0
 286 0020 C820     		movs	r0, #200
 287 0022 FFF7FEFF 		bl	ssd1306_WriteCommand
 288              	.LVL24:
  82:Src/ssd1306.c ****     ssd1306_WriteCommand(0x10); //---set high column address
 289              		.loc 1 82 0
 290 0026 0020     		movs	r0, #0
 291 0028 FFF7FEFF 		bl	ssd1306_WriteCommand
 292              	.LVL25:
  83:Src/ssd1306.c **** 
 293              		.loc 1 83 0
 294 002c 1020     		movs	r0, #16
 295 002e FFF7FEFF 		bl	ssd1306_WriteCommand
 296              	.LVL26:
ARM GAS  /tmp/ccTdk9tj.s 			page 9


  85:Src/ssd1306.c **** 
 297              		.loc 1 85 0
 298 0032 4020     		movs	r0, #64
 299 0034 FFF7FEFF 		bl	ssd1306_WriteCommand
 300              	.LVL27:
  87:Src/ssd1306.c ****     ssd1306_WriteCommand(0xFF);
 301              		.loc 1 87 0
 302 0038 8120     		movs	r0, #129
 303 003a FFF7FEFF 		bl	ssd1306_WriteCommand
 304              	.LVL28:
  88:Src/ssd1306.c **** 
 305              		.loc 1 88 0
 306 003e FF20     		movs	r0, #255
 307 0040 FFF7FEFF 		bl	ssd1306_WriteCommand
 308              	.LVL29:
  93:Src/ssd1306.c **** #endif
 309              		.loc 1 93 0
 310 0044 A120     		movs	r0, #161
 311 0046 FFF7FEFF 		bl	ssd1306_WriteCommand
 312              	.LVL30:
  99:Src/ssd1306.c **** #endif
 313              		.loc 1 99 0
 314 004a A620     		movs	r0, #166
 315 004c FFF7FEFF 		bl	ssd1306_WriteCommand
 316              	.LVL31:
 102:Src/ssd1306.c ****     ssd1306_WriteCommand(0x3F); //
 317              		.loc 1 102 0
 318 0050 A820     		movs	r0, #168
 319 0052 FFF7FEFF 		bl	ssd1306_WriteCommand
 320              	.LVL32:
 103:Src/ssd1306.c **** 
 321              		.loc 1 103 0
 322 0056 3F20     		movs	r0, #63
 323 0058 FFF7FEFF 		bl	ssd1306_WriteCommand
 324              	.LVL33:
 105:Src/ssd1306.c **** 
 325              		.loc 1 105 0
 326 005c A420     		movs	r0, #164
 327 005e FFF7FEFF 		bl	ssd1306_WriteCommand
 328              	.LVL34:
 107:Src/ssd1306.c ****     ssd1306_WriteCommand(0x00); //-not offset
 329              		.loc 1 107 0
 330 0062 D320     		movs	r0, #211
 331 0064 FFF7FEFF 		bl	ssd1306_WriteCommand
 332              	.LVL35:
 108:Src/ssd1306.c **** 
 333              		.loc 1 108 0
 334 0068 0020     		movs	r0, #0
 335 006a FFF7FEFF 		bl	ssd1306_WriteCommand
 336              	.LVL36:
 110:Src/ssd1306.c ****     ssd1306_WriteCommand(0xF0); //--set divide ratio
 337              		.loc 1 110 0
 338 006e D520     		movs	r0, #213
 339 0070 FFF7FEFF 		bl	ssd1306_WriteCommand
 340              	.LVL37:
 111:Src/ssd1306.c **** 
 341              		.loc 1 111 0
ARM GAS  /tmp/ccTdk9tj.s 			page 10


 342 0074 F020     		movs	r0, #240
 343 0076 FFF7FEFF 		bl	ssd1306_WriteCommand
 344              	.LVL38:
 113:Src/ssd1306.c ****     ssd1306_WriteCommand(0x22); //
 345              		.loc 1 113 0
 346 007a D920     		movs	r0, #217
 347 007c FFF7FEFF 		bl	ssd1306_WriteCommand
 348              	.LVL39:
 114:Src/ssd1306.c **** 
 349              		.loc 1 114 0
 350 0080 2220     		movs	r0, #34
 351 0082 FFF7FEFF 		bl	ssd1306_WriteCommand
 352              	.LVL40:
 116:Src/ssd1306.c ****     ssd1306_WriteCommand(0x12);
 353              		.loc 1 116 0
 354 0086 DA20     		movs	r0, #218
 355 0088 FFF7FEFF 		bl	ssd1306_WriteCommand
 356              	.LVL41:
 117:Src/ssd1306.c **** 
 357              		.loc 1 117 0
 358 008c 1220     		movs	r0, #18
 359 008e FFF7FEFF 		bl	ssd1306_WriteCommand
 360              	.LVL42:
 119:Src/ssd1306.c ****     ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 361              		.loc 1 119 0
 362 0092 DB20     		movs	r0, #219
 363 0094 FFF7FEFF 		bl	ssd1306_WriteCommand
 364              	.LVL43:
 120:Src/ssd1306.c **** 
 365              		.loc 1 120 0
 366 0098 2020     		movs	r0, #32
 367 009a FFF7FEFF 		bl	ssd1306_WriteCommand
 368              	.LVL44:
 122:Src/ssd1306.c ****     ssd1306_WriteCommand(0x14); //
 369              		.loc 1 122 0
 370 009e 8D20     		movs	r0, #141
 371 00a0 FFF7FEFF 		bl	ssd1306_WriteCommand
 372              	.LVL45:
 123:Src/ssd1306.c ****     ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 373              		.loc 1 123 0
 374 00a4 1420     		movs	r0, #20
 375 00a6 FFF7FEFF 		bl	ssd1306_WriteCommand
 376              	.LVL46:
 124:Src/ssd1306.c **** 
 377              		.loc 1 124 0
 378 00aa AF20     		movs	r0, #175
 379 00ac FFF7FEFF 		bl	ssd1306_WriteCommand
 380              	.LVL47:
 127:Src/ssd1306.c ****     
 381              		.loc 1 127 0
 382 00b0 0020     		movs	r0, #0
 383 00b2 FFF7FEFF 		bl	ssd1306_Fill
 384              	.LVL48:
 130:Src/ssd1306.c ****     
 385              		.loc 1 130 0
 386 00b6 FFF7FEFF 		bl	ssd1306_UpdateScreen
 387              	.LVL49:
ARM GAS  /tmp/ccTdk9tj.s 			page 11


 133:Src/ssd1306.c ****     SSD1306.CurrentY = 0;
 388              		.loc 1 133 0
 389 00ba 034B     		ldr	r3, .L26
 390 00bc 0022     		movs	r2, #0
 391 00be 1A80     		strh	r2, [r3]	@ movhi
 134:Src/ssd1306.c ****     
 392              		.loc 1 134 0
 393 00c0 5A80     		strh	r2, [r3, #2]	@ movhi
 136:Src/ssd1306.c **** }
 394              		.loc 1 136 0
 395 00c2 0122     		movs	r2, #1
 396 00c4 5A71     		strb	r2, [r3, #5]
 137:Src/ssd1306.c **** 
 397              		.loc 1 137 0
 398 00c6 08BD     		pop	{r3, pc}
 399              	.L27:
 400              		.align	2
 401              	.L26:
 402 00c8 00000000 		.word	.LANCHOR1
 403              		.cfi_endproc
 404              	.LFE69:
 406              		.section	.text.ssd1306_DrawPixel,"ax",%progbits
 407              		.align	1
 408              		.global	ssd1306_DrawPixel
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu softvfp
 414              	ssd1306_DrawPixel:
 415              	.LFB72:
 159:Src/ssd1306.c **** 
 160:Src/ssd1306.c **** //    Draw one pixel in the screenbuffer
 161:Src/ssd1306.c **** //    X => X Coordinate
 162:Src/ssd1306.c **** //    Y => Y Coordinate
 163:Src/ssd1306.c **** //    color => Pixel color
 164:Src/ssd1306.c **** void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 416              		.loc 1 164 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 421              	.LVL50:
 165:Src/ssd1306.c ****     if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 422              		.loc 1 165 0
 423 0000 10F0800F 		tst	r0, #128
 424 0004 15D1     		bne	.L28
 425              		.loc 1 165 0 is_stmt 0 discriminator 1
 426 0006 3F29     		cmp	r1, #63
 427 0008 13D8     		bhi	.L28
 166:Src/ssd1306.c ****         // Don't write outside the buffer
 167:Src/ssd1306.c ****         return;
 168:Src/ssd1306.c ****     }
 169:Src/ssd1306.c ****     
 170:Src/ssd1306.c ****     // Check if pixel should be inverted
 171:Src/ssd1306.c ****     if(SSD1306.Inverted) {
 428              		.loc 1 171 0 is_stmt 1
 429 000a 104B     		ldr	r3, .L33
ARM GAS  /tmp/ccTdk9tj.s 			page 12


 430 000c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 431 000e 13B1     		cbz	r3, .L30
 172:Src/ssd1306.c ****         color = (SSD1306_COLOR)!color;
 432              		.loc 1 172 0
 433 0010 B2FA82F2 		clz	r2, r2
 434              	.LVL51:
 435 0014 5209     		lsrs	r2, r2, #5
 436              	.LVL52:
 437              	.L30:
 173:Src/ssd1306.c ****     }
 174:Src/ssd1306.c ****     
 175:Src/ssd1306.c ****     // Draw in the right color
 176:Src/ssd1306.c ****     if(color == White) {
 438              		.loc 1 176 0
 439 0016 012A     		cmp	r2, #1
 440 0018 0CD0     		beq	.L32
 177:Src/ssd1306.c ****         SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 178:Src/ssd1306.c ****     } else { 
 179:Src/ssd1306.c ****         SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 441              		.loc 1 179 0
 442 001a CB08     		lsrs	r3, r1, #3
 443 001c 00EBC310 		add	r0, r0, r3, lsl #7
 444              	.LVL53:
 445 0020 01F00701 		and	r1, r1, #7
 446              	.LVL54:
 447 0024 0123     		movs	r3, #1
 448 0026 8B40     		lsls	r3, r3, r1
 449 0028 094A     		ldr	r2, .L33+4
 450              	.LVL55:
 451 002a 115C     		ldrb	r1, [r2, r0]	@ zero_extendqisi2
 452 002c 21EA0301 		bic	r1, r1, r3
 453 0030 1154     		strb	r1, [r2, r0]
 454              	.L28:
 180:Src/ssd1306.c ****     }
 181:Src/ssd1306.c **** }
 455              		.loc 1 181 0
 456 0032 7047     		bx	lr
 457              	.LVL56:
 458              	.L32:
 177:Src/ssd1306.c ****         SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 459              		.loc 1 177 0
 460 0034 CB08     		lsrs	r3, r1, #3
 461 0036 00EBC310 		add	r0, r0, r3, lsl #7
 462              	.LVL57:
 463 003a 01F00701 		and	r1, r1, #7
 464              	.LVL58:
 465 003e 0123     		movs	r3, #1
 466 0040 8B40     		lsls	r3, r3, r1
 467 0042 034A     		ldr	r2, .L33+4
 468              	.LVL59:
 469 0044 115C     		ldrb	r1, [r2, r0]	@ zero_extendqisi2
 470 0046 1943     		orrs	r1, r1, r3
 471 0048 1154     		strb	r1, [r2, r0]
 472 004a 7047     		bx	lr
 473              	.L34:
 474              		.align	2
 475              	.L33:
ARM GAS  /tmp/ccTdk9tj.s 			page 13


 476 004c 00000000 		.word	.LANCHOR1
 477 0050 00000000 		.word	.LANCHOR0
 478              		.cfi_endproc
 479              	.LFE72:
 481              		.section	.text.ssd1306_WriteChar,"ax",%progbits
 482              		.align	1
 483              		.global	ssd1306_WriteChar
 484              		.syntax unified
 485              		.thumb
 486              		.thumb_func
 487              		.fpu softvfp
 489              	ssd1306_WriteChar:
 490              	.LFB73:
 182:Src/ssd1306.c **** 
 183:Src/ssd1306.c **** // Draw 1 char to the screen buffer
 184:Src/ssd1306.c **** // ch         => char om weg te schrijven
 185:Src/ssd1306.c **** // Font     => Font waarmee we gaan schrijven
 186:Src/ssd1306.c **** // color     => Black or White
 187:Src/ssd1306.c **** char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 491              		.loc 1 187 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 8
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              	.LVL60:
 496 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 497              	.LCFI8:
 498              		.cfi_def_cfa_offset 36
 499              		.cfi_offset 4, -36
 500              		.cfi_offset 5, -32
 501              		.cfi_offset 6, -28
 502              		.cfi_offset 7, -24
 503              		.cfi_offset 8, -20
 504              		.cfi_offset 9, -16
 505              		.cfi_offset 10, -12
 506              		.cfi_offset 11, -8
 507              		.cfi_offset 14, -4
 508 0004 83B0     		sub	sp, sp, #12
 509              	.LCFI9:
 510              		.cfi_def_cfa_offset 48
 511 0006 02AC     		add	r4, sp, #8
 512 0008 04E90600 		stmdb	r4, {r1, r2}
 188:Src/ssd1306.c ****     uint32_t i, b, j;
 189:Src/ssd1306.c ****     
 190:Src/ssd1306.c ****     // Check remaining space on current line
 191:Src/ssd1306.c ****     if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 513              		.loc 1 191 0
 514 000c 244A     		ldr	r2, .L48
 515 000e 1288     		ldrh	r2, [r2]
 516 0010 9DF80060 		ldrb	r6, [sp]	@ zero_extendqisi2
 517 0014 3244     		add	r2, r2, r6
 518 0016 7F2A     		cmp	r2, #127
 519 0018 3CDC     		bgt	.L43
 192:Src/ssd1306.c ****         SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 520              		.loc 1 192 0 discriminator 1
 521 001a 214A     		ldr	r2, .L48
 522 001c 5288     		ldrh	r2, [r2, #2]
 523 001e 9DF801A0 		ldrb	r10, [sp, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccTdk9tj.s 			page 14


 524 0022 D346     		mov	fp, r10
 525 0024 5244     		add	r2, r2, r10
 191:Src/ssd1306.c ****         SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 526              		.loc 1 191 0 discriminator 1
 527 0026 3F2A     		cmp	r2, #63
 528 0028 38DC     		bgt	.L44
 529 002a 9846     		mov	r8, r3
 530 002c 8146     		mov	r9, r0
 193:Src/ssd1306.c ****     {
 194:Src/ssd1306.c ****         // Not enough space on current line
 195:Src/ssd1306.c ****         return 0;
 196:Src/ssd1306.c ****     }
 197:Src/ssd1306.c ****     
 198:Src/ssd1306.c ****     // Use the font to write
 199:Src/ssd1306.c ****     for(i = 0; i < Font.FontHeight; i++) {
 531              		.loc 1 199 0
 532 002e 0025     		movs	r5, #0
 533 0030 1FE0     		b	.L37
 534              	.LVL61:
 535              	.L39:
 200:Src/ssd1306.c ****         b = Font.data[(ch - 32) * Font.FontHeight + i];
 201:Src/ssd1306.c ****         for(j = 0; j < Font.FontWidth; j++) {
 202:Src/ssd1306.c ****             if((b << j) & 0x8000)  {
 203:Src/ssd1306.c ****                 ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) col
 204:Src/ssd1306.c ****             } else {
 205:Src/ssd1306.c ****                 ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!col
 536              		.loc 1 205 0
 537 0032 1B4B     		ldr	r3, .L48
 538 0034 1888     		ldrh	r0, [r3]
 539 0036 5988     		ldrh	r1, [r3, #2]
 540 0038 2944     		add	r1, r1, r5
 541 003a 2044     		add	r0, r0, r4
 542 003c B8FA88F2 		clz	r2, r8
 543 0040 5209     		lsrs	r2, r2, #5
 544 0042 C9B2     		uxtb	r1, r1
 545 0044 C0B2     		uxtb	r0, r0
 546 0046 FFF7FEFF 		bl	ssd1306_DrawPixel
 547              	.LVL62:
 548              	.L40:
 201:Src/ssd1306.c ****             if((b << j) & 0x8000)  {
 549              		.loc 1 201 0 discriminator 2
 550 004a 0134     		adds	r4, r4, #1
 551              	.LVL63:
 552              	.L38:
 201:Src/ssd1306.c ****             if((b << j) & 0x8000)  {
 553              		.loc 1 201 0 is_stmt 0 discriminator 1
 554 004c A642     		cmp	r6, r4
 555 004e 0FD9     		bls	.L46
 202:Src/ssd1306.c ****                 ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) col
 556              		.loc 1 202 0 is_stmt 1
 557 0050 07FA04F3 		lsl	r3, r7, r4
 558 0054 13F4004F 		tst	r3, #32768
 559 0058 EBD0     		beq	.L39
 203:Src/ssd1306.c ****             } else {
 560              		.loc 1 203 0
 561 005a 114B     		ldr	r3, .L48
 562 005c 1888     		ldrh	r0, [r3]
ARM GAS  /tmp/ccTdk9tj.s 			page 15


 563 005e 5988     		ldrh	r1, [r3, #2]
 564 0060 2944     		add	r1, r1, r5
 565 0062 2044     		add	r0, r0, r4
 566 0064 4246     		mov	r2, r8
 567 0066 C9B2     		uxtb	r1, r1
 568 0068 C0B2     		uxtb	r0, r0
 569 006a FFF7FEFF 		bl	ssd1306_DrawPixel
 570              	.LVL64:
 571 006e ECE7     		b	.L40
 572              	.L46:
 199:Src/ssd1306.c ****         b = Font.data[(ch - 32) * Font.FontHeight + i];
 573              		.loc 1 199 0 discriminator 2
 574 0070 0135     		adds	r5, r5, #1
 575              	.LVL65:
 576              	.L37:
 199:Src/ssd1306.c ****         b = Font.data[(ch - 32) * Font.FontHeight + i];
 577              		.loc 1 199 0 is_stmt 0 discriminator 1
 578 0072 AA45     		cmp	r10, r5
 579 0074 08D9     		bls	.L47
 200:Src/ssd1306.c ****         for(j = 0; j < Font.FontWidth; j++) {
 580              		.loc 1 200 0 is_stmt 1
 581 0076 A9F12003 		sub	r3, r9, #32
 582 007a 03FB0B53 		mla	r3, r3, fp, r5
 583 007e 019A     		ldr	r2, [sp, #4]
 584 0080 32F81370 		ldrh	r7, [r2, r3, lsl #1]
 585              	.LVL66:
 201:Src/ssd1306.c ****             if((b << j) & 0x8000)  {
 586              		.loc 1 201 0
 587 0084 0024     		movs	r4, #0
 588 0086 E1E7     		b	.L38
 589              	.LVL67:
 590              	.L47:
 206:Src/ssd1306.c ****             }
 207:Src/ssd1306.c ****         }
 208:Src/ssd1306.c ****     }
 209:Src/ssd1306.c ****     
 210:Src/ssd1306.c ****     // The current space is now taken
 211:Src/ssd1306.c ****     SSD1306.CurrentX += Font.FontWidth;
 591              		.loc 1 211 0
 592 0088 054B     		ldr	r3, .L48
 593 008a 1A88     		ldrh	r2, [r3]
 594 008c 1644     		add	r6, r6, r2
 595 008e 1E80     		strh	r6, [r3]	@ movhi
 212:Src/ssd1306.c ****     
 213:Src/ssd1306.c ****     // Return written char for validation
 214:Src/ssd1306.c ****     return ch;
 596              		.loc 1 214 0
 597 0090 4846     		mov	r0, r9
 598 0092 00E0     		b	.L36
 599              	.LVL68:
 600              	.L43:
 195:Src/ssd1306.c ****     }
 601              		.loc 1 195 0
 602 0094 0020     		movs	r0, #0
 603              	.LVL69:
 604              	.L36:
 215:Src/ssd1306.c **** }
ARM GAS  /tmp/ccTdk9tj.s 			page 16


 605              		.loc 1 215 0
 606 0096 03B0     		add	sp, sp, #12
 607              	.LCFI10:
 608              		.cfi_remember_state
 609              		.cfi_def_cfa_offset 36
 610              		@ sp needed
 611 0098 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 612              	.LVL70:
 613              	.L44:
 614              	.LCFI11:
 615              		.cfi_restore_state
 195:Src/ssd1306.c ****     }
 616              		.loc 1 195 0
 617 009c 0020     		movs	r0, #0
 618              	.LVL71:
 619 009e FAE7     		b	.L36
 620              	.L49:
 621              		.align	2
 622              	.L48:
 623 00a0 00000000 		.word	.LANCHOR1
 624              		.cfi_endproc
 625              	.LFE73:
 627              		.section	.text.ssd1306_WriteString,"ax",%progbits
 628              		.align	1
 629              		.global	ssd1306_WriteString
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu softvfp
 635              	ssd1306_WriteString:
 636              	.LFB74:
 216:Src/ssd1306.c **** 
 217:Src/ssd1306.c **** // Write full string to screenbuffer
 218:Src/ssd1306.c **** char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 637              		.loc 1 218 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 8
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              	.LVL72:
 642 0000 70B5     		push	{r4, r5, r6, lr}
 643              	.LCFI12:
 644              		.cfi_def_cfa_offset 16
 645              		.cfi_offset 4, -16
 646              		.cfi_offset 5, -12
 647              		.cfi_offset 6, -8
 648              		.cfi_offset 14, -4
 649 0002 82B0     		sub	sp, sp, #8
 650              	.LCFI13:
 651              		.cfi_def_cfa_offset 24
 652 0004 0546     		mov	r5, r0
 653 0006 02A8     		add	r0, sp, #8
 654              	.LVL73:
 655 0008 00E90600 		stmdb	r0, {r1, r2}
 656 000c 1E46     		mov	r6, r3
 657              	.LVL74:
 658              	.L51:
 219:Src/ssd1306.c ****     // Write until null-byte
ARM GAS  /tmp/ccTdk9tj.s 			page 17


 220:Src/ssd1306.c ****     while (*str) {
 659              		.loc 1 220 0
 660 000e 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 661 0010 5CB1     		cbz	r4, .L52
 221:Src/ssd1306.c ****         if (ssd1306_WriteChar(*str, Font, color) != *str) {
 662              		.loc 1 221 0
 663 0012 3346     		mov	r3, r6
 664 0014 02AA     		add	r2, sp, #8
 665 0016 12E90600 		ldmdb	r2, {r1, r2}
 666 001a 2046     		mov	r0, r4
 667 001c FFF7FEFF 		bl	ssd1306_WriteChar
 668              	.LVL75:
 669 0020 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
 670 0022 A042     		cmp	r0, r4
 671 0024 01D1     		bne	.L52
 222:Src/ssd1306.c ****             // Char could not be written
 223:Src/ssd1306.c ****             return *str;
 224:Src/ssd1306.c ****         }
 225:Src/ssd1306.c ****         
 226:Src/ssd1306.c ****         // Next char
 227:Src/ssd1306.c ****         str++;
 672              		.loc 1 227 0
 673 0026 0135     		adds	r5, r5, #1
 674              	.LVL76:
 675 0028 F1E7     		b	.L51
 676              	.L52:
 228:Src/ssd1306.c ****     }
 229:Src/ssd1306.c ****     
 230:Src/ssd1306.c ****     // Everything ok
 231:Src/ssd1306.c ****     return *str;
 232:Src/ssd1306.c **** }
 677              		.loc 1 232 0
 678 002a 2046     		mov	r0, r4
 679 002c 02B0     		add	sp, sp, #8
 680              	.LCFI14:
 681              		.cfi_def_cfa_offset 16
 682              		@ sp needed
 683 002e 70BD     		pop	{r4, r5, r6, pc}
 684              		.cfi_endproc
 685              	.LFE74:
 687              		.section	.text.ssd1306_SetCursor,"ax",%progbits
 688              		.align	1
 689              		.global	ssd1306_SetCursor
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu softvfp
 695              	ssd1306_SetCursor:
 696              	.LFB75:
 233:Src/ssd1306.c **** 
 234:Src/ssd1306.c **** // Position the cursor
 235:Src/ssd1306.c **** void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 697              		.loc 1 235 0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              		@ link register save eliminated.
ARM GAS  /tmp/ccTdk9tj.s 			page 18


 702              	.LVL77:
 236:Src/ssd1306.c ****     SSD1306.CurrentX = x;
 703              		.loc 1 236 0
 704 0000 014B     		ldr	r3, .L56
 705 0002 1880     		strh	r0, [r3]	@ movhi
 237:Src/ssd1306.c ****     SSD1306.CurrentY = y;
 706              		.loc 1 237 0
 707 0004 5980     		strh	r1, [r3, #2]	@ movhi
 238:Src/ssd1306.c **** }
 708              		.loc 1 238 0
 709 0006 7047     		bx	lr
 710              	.L57:
 711              		.align	2
 712              	.L56:
 713 0008 00000000 		.word	.LANCHOR1
 714              		.cfi_endproc
 715              	.LFE75:
 717              		.section	.bss.SSD1306,"aw",%nobits
 718              		.align	2
 719              		.set	.LANCHOR1,. + 0
 722              	SSD1306:
 723 0000 00000000 		.space	6
 723      0000
 724              		.section	.bss.SSD1306_Buffer,"aw",%nobits
 725              		.align	2
 726              		.set	.LANCHOR0,. + 0
 729              	SSD1306_Buffer:
 730 0000 00000000 		.space	1024
 730      00000000 
 730      00000000 
 730      00000000 
 730      00000000 
 731              		.text
 732              	.Letext0:
 733              		.file 2 "/home/logic/_workspace/STM32Toolchain/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/in
 734              		.file 3 "/home/logic/_workspace/STM32Toolchain/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/in
 735              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 736              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 737              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 738              		.file 7 "/home/logic/_workspace/STM32Toolchain/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none
 739              		.file 8 "/home/logic/_workspace/STM32Toolchain/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/in
 740              		.file 9 "/home/logic/_workspace/STM32Toolchain/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/in
 741              		.file 10 "/home/logic/_workspace/STM32Toolchain/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/i
 742              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 743              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 744              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 745              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 746              		.file 15 "Inc/ssd1306_fonts.h"
 747              		.file 16 "Inc/ssd1306.h"
ARM GAS  /tmp/ccTdk9tj.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ssd1306.c
     /tmp/ccTdk9tj.s:16     .text.ssd1306_Reset:0000000000000000 $t
     /tmp/ccTdk9tj.s:23     .text.ssd1306_Reset:0000000000000000 ssd1306_Reset
     /tmp/ccTdk9tj.s:37     .text.ssd1306_WriteCommand:0000000000000000 $t
     /tmp/ccTdk9tj.s:44     .text.ssd1306_WriteCommand:0000000000000000 ssd1306_WriteCommand
     /tmp/ccTdk9tj.s:81     .text.ssd1306_WriteCommand:0000000000000028 $d
     /tmp/ccTdk9tj.s:86     .text.ssd1306_WriteData:0000000000000000 $t
     /tmp/ccTdk9tj.s:93     .text.ssd1306_WriteData:0000000000000000 ssd1306_WriteData
     /tmp/ccTdk9tj.s:130    .text.ssd1306_WriteData:0000000000000024 $d
     /tmp/ccTdk9tj.s:135    .text.ssd1306_Fill:0000000000000000 $t
     /tmp/ccTdk9tj.s:142    .text.ssd1306_Fill:0000000000000000 ssd1306_Fill
     /tmp/ccTdk9tj.s:179    .text.ssd1306_Fill:000000000000001c $d
     /tmp/ccTdk9tj.s:184    .text.ssd1306_UpdateScreen:0000000000000000 $t
     /tmp/ccTdk9tj.s:191    .text.ssd1306_UpdateScreen:0000000000000000 ssd1306_UpdateScreen
     /tmp/ccTdk9tj.s:242    .text.ssd1306_UpdateScreen:0000000000000034 $d
     /tmp/ccTdk9tj.s:247    .text.ssd1306_Init:0000000000000000 $t
     /tmp/ccTdk9tj.s:254    .text.ssd1306_Init:0000000000000000 ssd1306_Init
     /tmp/ccTdk9tj.s:402    .text.ssd1306_Init:00000000000000c8 $d
     /tmp/ccTdk9tj.s:407    .text.ssd1306_DrawPixel:0000000000000000 $t
     /tmp/ccTdk9tj.s:414    .text.ssd1306_DrawPixel:0000000000000000 ssd1306_DrawPixel
     /tmp/ccTdk9tj.s:476    .text.ssd1306_DrawPixel:000000000000004c $d
     /tmp/ccTdk9tj.s:482    .text.ssd1306_WriteChar:0000000000000000 $t
     /tmp/ccTdk9tj.s:489    .text.ssd1306_WriteChar:0000000000000000 ssd1306_WriteChar
     /tmp/ccTdk9tj.s:623    .text.ssd1306_WriteChar:00000000000000a0 $d
     /tmp/ccTdk9tj.s:628    .text.ssd1306_WriteString:0000000000000000 $t
     /tmp/ccTdk9tj.s:635    .text.ssd1306_WriteString:0000000000000000 ssd1306_WriteString
     /tmp/ccTdk9tj.s:688    .text.ssd1306_SetCursor:0000000000000000 $t
     /tmp/ccTdk9tj.s:695    .text.ssd1306_SetCursor:0000000000000000 ssd1306_SetCursor
     /tmp/ccTdk9tj.s:713    .text.ssd1306_SetCursor:0000000000000008 $d
     /tmp/ccTdk9tj.s:718    .bss.SSD1306:0000000000000000 $d
     /tmp/ccTdk9tj.s:722    .bss.SSD1306:0000000000000000 SSD1306
     /tmp/ccTdk9tj.s:725    .bss.SSD1306_Buffer:0000000000000000 $d
     /tmp/ccTdk9tj.s:729    .bss.SSD1306_Buffer:0000000000000000 SSD1306_Buffer

UNDEFINED SYMBOLS
HAL_I2C_Mem_Write
hi2c1
HAL_Delay
